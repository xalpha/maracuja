////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// This file is part of MaracujaMS, a C++ UI image segmentation               //
//                                                                            //
// Copyright (C) 2013 Alexandru Duliu, Anne-Claire Morvan                     //
//                                                                            //
// MaracujaMS is free software; you can redistribute it and/or                //
// modify it under the terms of the GNU  General Public License               //
// as published by the Free Software Foundation; either version 3             //
// of the License, or (at your option) any later version.                     //
//                                                                            //
// MaracujaMS is distributed in the hope that it will be useful,              //
// but WITHOUT ANY WARRANTY; without even the implied warranty of             //
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              //
// GNU General Public License for more details.                               //
//                                                                            //
// You should have received a copy of the GNU General Public License          //
// along with MaracujaMS. If not, see <http://www.gnu.org/licenses/>.         //
//                                                                            //
///////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include <stdexcept>
#include <cmath>

#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QPainter>
#include <QPixmap>
#include <QProgressDialog>
#include <QStringList>
#include <QGraphicsPixmapItem>

#include <maracuja/util.hpp>
#include <maracuja/MSImage.hpp>

#include "ui_MaracujaMS.h"
#include <MaracujaMS.hpp>
#include <SSM.hpp>
//#include <SpecOpsTest.hpp>


MaracujaMS::MaracujaMS(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MaracujaMS),
    m_lastDir(".")
{
    ui->setupUi(this);

    connect( ui->add_channel, SIGNAL(clicked(bool)), this, SLOT(on_addChannel(void)) );
    connect( ui->default_channels,  SIGNAL(clicked(bool)), this, SLOT(on_addDefaultChannels(void)) );
    connect( ui->filter_load_image, SIGNAL(clicked(bool)), this, SLOT(on_loadImage(void)) );
    connect( ui->filter_show_image, SIGNAL(clicked(bool)), this, SLOT(on_showImage(void)) );
    connect( ui->calculation_button, SIGNAL(clicked(bool)), this, SLOT(on_calculation(void)) );
    connect( ui->saveRGB, SIGNAL(clicked(bool)), this, SLOT(on_saveRGB(void)) );
    connect( ui->load_ms, SIGNAL(clicked(bool)), this, SLOT(on_loadMS(void)) );
    connect( ui->save_ms, SIGNAL(clicked(bool)), this, SLOT(on_saveMS(void)) );
    connect( ui->load_spectrum1_button, SIGNAL(clicked(bool)), this, SLOT(on_load_spectrum1(void)) );
    connect( ui->load_spectrum2_button, SIGNAL(clicked(bool)), this, SLOT(on_load_spectrum2(void)) );
    connect( ui->show_spectrum1_button, SIGNAL(clicked(bool)), this, SLOT(on_show_spectrum1(void)) );
    connect( ui->show_spectrum2_button, SIGNAL(clicked(bool)), this, SLOT(on_show_spectrum2(void)) );
    connect( ui->hide_spectrum1_button, SIGNAL(clicked(bool)), this, SLOT(on_hide_spectrum1(void)) );
    connect( ui->hide_spectrum2_button, SIGNAL(clicked(bool)), this, SLOT(on_hide_spectrum2(void)) );
    connect( ui->multiply_spectra_button, SIGNAL(clicked(bool)), this, SLOT(on_multiply_spectra(void)) );
    connect( ui->on_add_dummy_spectra_button, SIGNAL(clicked(bool)), this, SLOT(on_add_dummy_spectra(void)) );
    connect( ui->apply_spectrum2_to_image_button, SIGNAL(clicked(bool)), this, SLOT(on_apply_spectrum2(void)) );
    connect( ui->apply_spectrum1_to_image_button, SIGNAL(clicked(bool)), this, SLOT(on_apply_spectrum1(void)) );
    connect( ui->filter_toggle_filter_spectrum, SIGNAL(clicked(bool)), this, SLOT(on_toggle_filter_spectrum(void)) );
    connect( ui->filter_toggle_sensor_spectrum, SIGNAL(clicked(bool)), this, SLOT(on_toggle_sensor_spectrum(void)) );
    connect( ui->filter_toggle_sensor_filter_convolution, SIGNAL(clicked(bool)), this, SLOT(on_toggle_filter_sensor_convolution(void)) );
    connect( ui->filter_apply_filter, SIGNAL(clicked(bool)), this, SLOT(on_apply_filter(void)) );	  
    connect( ui->filter_apply_sensor, SIGNAL(clicked(bool)), this, SLOT(on_apply_sensor(void)) );	
    connect( ui->filter_apply_both, SIGNAL(clicked(bool)), this, SLOT(on_apply_both(void)) );	 
	   
	   ui->view->addGraph();
	   ui->view->addGraph();
	   ui->view->addGraph();
	   ui->view->addGraph(); //reserved for filter spectrum
	   ui->view->addGraph(); //reserved for sensor spectrum
	   ui->view->addGraph(); //reserved for filter-sensor convolution spectrum
}


MaracujaMS::~MaracujaMS()
{
    delete ui;
}

void MaracujaMS::updateComboBox()
{
    ui->channel_choice->clear();
    QStringList nameList;
    for (unsigned idx = 0; idx < m_MSImage.channels().size(); idx ++)
    {
        nameList << QString(m_MSImage.channels()[idx].name().c_str());
    }
    const QStringList choiceList = nameList;
    ui->channel_choice->addItems(choiceList);
}

void MaracujaMS::on_addChannel()
{
    try
    {
        std::string filterName = ui->filter_name->text().toStdString();
        int filterId = ui->filter_id->value();
        double startVal = ui->filter_begin->value();
        double endVal = ui->filter_end->value();

        // extraction of the values of the filter
        std::vector<double> filterValues(0);
        std::stringstream ssf;
        std::string filt = ui->filter_values->text().toStdString();
        ssf << filt;
        ssf.seekg(std::ios::beg);
        double temp;
        while (!ssf.eof())
        {
            ssf >> temp;
            filterValues.push_back(temp);
        }
        maracuja::Spectrum<double> filterSpectrum;
        unsigned values_nb = (unsigned) filterValues.size();
        Eigen::VectorXd filter(values_nb);
        for (unsigned writeIdx = 0; writeIdx < values_nb; writeIdx++)
        {
            filter(writeIdx) = filterValues[writeIdx];
        }
        filterSpectrum = maracuja::Spectrum<double>(startVal, endVal, filter);

        // extraction of the values of the sensitivity
        std::vector<double> sensitValues(0);
        std::stringstream sss;
        std::string sensit = ui->filter_values->text().toStdString();
        sss << sensit;
        sss.seekg(std::ios::beg);
        while (!sss.eof())
        {
            sss >> temp;
            sensitValues.push_back(temp);
        }
        maracuja::Spectrum<double> sensitSpectrum;
        values_nb = (unsigned) sensitValues.size();
        Eigen::VectorXd sensitivity(values_nb);
        for (unsigned writeIdx = 0; writeIdx < values_nb; writeIdx++)
        {
            sensitivity(writeIdx) = sensitValues[writeIdx];
        }
        sensitSpectrum = maracuja::Spectrum<double>(startVal, endVal, sensitivity);

        // add the channel to the m_MSImages
        maracuja::Channel<double,float> tempChannel;
        tempChannel.set(filterId, filterSpectrum, sensitSpectrum, filterName);
        this->m_MSImage.addChannel(tempChannel);

        this->updateComboBox();

    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}

void MaracujaMS::on_addDefaultChannels()
{
    try
    {
        m_MSImage.clear();

        // Sensitivity
        typename maracuja::Spectrum<double>::VectorX Sensitivity(551);
        Sensitivity << 0, 0, 0, 0.248571428571429, 0.251278195488722, 0.254436090225564, 0.257593984962406, 0.260751879699248, 0.263909774436090, 0.267518796992481, 0.270225563909775, 0.273834586466166, 0.277443609022556, 0.280150375939850, 0.283759398496241, 0.286466165413534, 0.290075187969925, 0.294702966206726, 0.300128893662728, 0.303782533256218, 0.306766917293233, 0.309924812030075, 0.313082706766917, 0.316240601503759, 0.319849624060150, 0.322556390977444, 0.326165413533835, 0.329323308270677, 0.332481203007519, 0.336090225563910, 0.338796992481203, 0.341954887218045, 0.345503759398496, 0.348270676691729, 0.352330827067669, 0.354586466165414, 0.357808807733620, 0.360902255639098, 0.363609022556391, 0.366766917293233, 0.369022556390978, 0.372631578947369, 0.375789473684211, 0.378947368421053, 0.381654135338346, 0.383909774436090, 0.386616541353384, 0.389323308270677, 0.392030075187970, 0.393383458646617, 0.397890635680109, 0.403578947368421, 0.405112781954887, 0.406466165413534, 0.409624060150376, 0.411879699248120, 0.414586466165414, 0.416842105263158, 0.418646616541354, 0.421804511278196, 0.423157894736842, 0.426315789473684, 0.428120300751880, 0.430375939849624, 0.432631578947369, 0.434887218045113, 0.437593984962406, 0.438947368421053, 0.441203007518797, 0.443458646616541, 0.445714285714286, 0.447969924812030, 0.449323308270677, 0.451578947368421, 0.453834586466166, 0.455639097744361, 0.456992481203008, 0.459248120300752, 0.461503759398496, 0.463308270676692, 0.465112781954887, 0.467368421052632, 0.469624060150376, 0.471654135338346, 0.474586466165414, 0.476390977443609, 0.477744360902256, 0.479548872180451, 0.481353383458647, 0.483157894736842, 0.484511278195489, 0.485864661654135, 0.487669172932331, 0.489022556390978, 0.490827067669173, 0.492180451127820, 0.493533834586466, 0.494436090225564, 0.495338345864662, 0.496992481203008, 0.499142857142857, 0.499142857142857, 0.501293233082707, 0.503007518796993, 0.503458646616541, 0.503458646616541, 0.504360902255639, 0.505263157894737, 0.505263157894737, 0.505714285714286, 0.506165413533835, 0.506616541353384, 0.506165413533835, 0.506165413533835, 0.506165413533835, 0.506165413533835, 0.506165413533835, 0.505488721804511, 0.505263157894737, 0.504812030075188, 0.504360902255639, 0.503458646616541, 0.503458646616541, 0.503007518796993, 0.502556390977444, 0.502105263157895, 0.501293233082707, 0.500751879699248, 0.500030075187970, 0.500030075187970, 0.499398496240602, 0.498766917293233, 0.498045112781955, 0.498045112781955, 0.498045112781955, 0.497503759398496, 0.497503759398496, 0.497503759398496, 0.496240601503760, 0.496240601503760, 0.495789473684211, 0.495789473684211, 0.495338345864662, 0.494887218045113, 0.494436090225564, 0.493533834586466, 0.493082706766917, 0.492180451127820, 0.491729323308271, 0.490827067669173, 0.489473684210526, 0.488571428571429, 0.487669172932331, 0.486766917293233, 0.485413533834587, 0.484060150375940, 0.483157894736842, 0.482255639097744, 0.481353383458647, 0.480451127819549, 0.479548872180451, 0.478646616541353, 0.477293233082707, 0.476842105263158, 0.475939849624060, 0.474586466165414, 0.473233082706767, 0.472330827067669, 0.471428571428572, 0.470526315789474, 0.469624060150376, 0.468721804511278, 0.467368421052632, 0.466015037593985, 0.465112781954887, 0.464210526315790, 0.462857142857143, 0.462406015037594, 0.461052631578947, 0.459699248120301, 0.458796992481203, 0.457894736842105, 0.456992481203008, 0.455187969924812, 0.453834586466166, 0.452481203007519, 0.451578947368421, 0.450225563909775, 0.449774436090226, 0.448421052631579, 0.447067669172932, 0.446616541353384, 0.445263157894737, 0.444360902255639, 0.443007518796993, 0.442556390977444, 0.441203007518797, 0.439849624060150, 0.438947368421053, 0.438045112781955, 0.436691729323308, 0.436691729323308, 0.435338345864662, 0.434436090225564, 0.433533834586466, 0.432631578947369, 0.431729323308271, 0.430827067669173, 0.429924812030075, 0.429022556390978, 0.427669172932331, 0.426766917293233, 0.425864661654135, 0.424962406015038, 0.424060150375940, 0.423609022556391, 0.422706766917293, 0.421353383458647, 0.420000000000000, 0.419097744360902, 0.418195488721805, 0.417293233082707, 0.416390977443609, 0.415488721804511, 0.414586466165414, 0.413684210526316, 0.412781954887218, 0.411879699248120, 0.410977443609023, 0.410075187969925, 0.409172932330827, 0.408270676691729, 0.407368421052632, 0.406466165413534, 0.405563909774436, 0.404661654135338, 0.403759398496241, 0.402857142857143, 0.401654135338346, 0.400451127819549, 0.399248120300752, 0.398045112781955, 0.396842105263158, 0.395187969924812, 0.394736842105263, 0.393834586466166, 0.392481203007519, 0.391578947368421, 0.390225563909775, 0.389323308270677, 0.387518796992481, 0.385263157894737, 0.384360902255639, 0.382556390977444, 0.381654135338346, 0.380300751879699, 0.378947368421053, 0.378045112781955, 0.376240601503760, 0.375338345864662, 0.373533834586466, 0.372180451127820, 0.370827067669173, 0.369473684210526, 0.367669172932331, 0.366315789473684, 0.364962406015038, 0.363609022556391, 0.361804511278196, 0.360902255639098, 0.359097744360902, 0.357744360902256, 0.355488721804511, 0.354586466165414, 0.353233082706767, 0.351428571428572, 0.349624060150376, 0.348270676691729, 0.346917293233083, 0.345112781954887, 0.343759398496241, 0.341954887218045, 0.340601503759399, 0.337894736842105, 0.335639097744361, 0.334285714285714, 0.332481203007519, 0.330676691729323, 0.329323308270677, 0.327518796992481, 0.326616541353384, 0.324360902255639, 0.322556390977444, 0.321654135338346, 0.319849624060150, 0.318045112781955, 0.316691729323308, 0.314887218045113, 0.313984962406015, 0.311729323308271, 0.309473684210526, 0.309473684210526, 0.307218045112782, 0.305413533834587, 0.304060150375940, 0.303157894736842, 0.300837808807734, 0.299097744360902, 0.296197636949517, 0.294586466165414, 0.293684210526316, 0.292330827067669, 0.290526315789474, 0.289172932330827, 0.287368421052632, 0.285112781954887, 0.283759398496241, 0.281052631578947, 0.278345864661654, 0.276541353383459, 0.274736842105263, 0.273383458646617, 0.271578947368421, 0.270225563909775, 0.268421052631579, 0.266165413533835, 0.264360902255639, 0.263007518796993, 0.261203007518797, 0.259398496240602, 0.257593984962406, 0.256691729323308, 0.254887218045113, 0.253082706766917, 0.251278195488722, 0.249924812030075, 0.247669172932331, 0.245864661654135, 0.244962406015038, 0.243157894736842, 0.241353383458647, 0.239548872180451, 0.238195488721805, 0.236390977443609, 0.235037593984962, 0.233684210526316, 0.231879699248120, 0.230526315789474, 0.229172932330827, 0.227368421052632, 0.225338345864662, 0.222857142857143, 0.221954887218045, 0.220150375939850, 0.218796992481203, 0.217443609022556, 0.216090225563910, 0.214736842105263, 0.212932330827068, 0.212030075187970, 0.210676691729323, 0.208872180451128, 0.207969924812030, 0.207067669172932, 0.205263157894737, 0.203909774436090, 0.203458646616541, 0.201428571428571, 0.200413533834587, 0.198882921589689, 0.196820622986037, 0.195789473684211, 0.194887218045113, 0.194436090225564, 0.192631578947368, 0.191278195488722, 0.190375939849624, 0.189022556390977, 0.187218045112782, 0.186766917293233, 0.185413533834586, 0.183609022556391, 0.183609022556391, 0.181353383458647, 0.179548872180451, 0.178646616541353, 0.177293233082707, 0.176390977443609, 0.175037593984962, 0.174135338345865, 0.172781954887218, 0.171879699248120, 0.170977443609023, 0.170075187969925, 0.168721804511278, 0.167368421052632, 0.166917293233083, 0.165563909774436, 0.164210526315790, 0.163759398496241, 0.162857142857143, 0.161729323308271, 0.160601503759399, 0.159248120300752, 0.158796992481203, 0.157443609022556, 0.156541353383459, 0.155639097744361, 0.155187969924812, 0.154285714285714, 0.153383458646617, 0.152481203007519, 0.151578947368421, 0.151127819548872, 0.150225563909774, 0.149323308270677, 0.148421052631579, 0.147293233082707, 0.146165413533835, 0.145263157894737, 0.144812030075188, 0.143458646616541, 0.143458646616541, 0.142556390977444, 0.141654135338346, 0.141654135338346, 0.139849624060150, 0.139849624060150, 0.138947368421053, 0.138496240601504, 0.137593984962406, 0.137142857142857, 0.136240601503759, 0.135338345864662, 0.134887218045113, 0.133533834586466, 0.133533834586466, 0.132631578947368, 0.131729323308271, 0.131278195488722, 0.129924812030075, 0.129924812030075, 0.129022556390977, 0.128120300751880, 0.127669172932331, 0.126766917293233, 0.125413533834586, 0.124962406015038, 0.124511278195489, 0.123609022556391, 0.122481203007519, 0.121353383458647, 0.120451127819549, 0.119548872180451, 0.118646616541353, 0.117744360902256, 0.116842105263158, 0.115939849624060, 0.115037593984962, 0.114135338345865, 0.113233082706767, 0.112330827067669, 0.111428571428571, 0.110526315789474, 0.109624060150376, 0.109172932330827, 0.107819548872180, 0.107368421052632, 0.106015037593985, 0.105563909774436, 0.103759398496241, 0.103308270676692, 0.103308270676692, 0.102105263157895, 0.100902255639098, 0.0996992481203007, 0.0984962406015038, 0.0965413533834587, 0.0960902255639098, 0.0956390977443610, 0.0951879699248120, 0.0942857142857143, 0.0933834586466166, 0.0920300751879700, 0.0906766917293234, 0.0897744360902256, 0.0888721804511279, 0.0879699248120301, 0.0866165413533835, 0.0866165413533835, 0.0848120300751880, 0.0843609022556391, 0.0834586466165413, 0.0830075187969925, 0.0821052631578948, 0.0812030075187971, 0.0803007518796993, 0.0798496240601504, 0.0789473684210527, 0.0780451127819549, 0.0775939849624060, 0.0766917293233083, 0.0757894736842105, 0.0753383458646617, 0.0748872180451128, 0.0739849624060150, 0.0730827067669173, 0.0726315789473685, 0.0721804511278196, 0.0712781954887218, 0.0708270676691729, 0.0703759398496241, 0.0694736842105264, 0.0690225563909774, 0.0685714285714286, 0.0676691729323309, 0.0672180451127820, 0.0663157894736843, 0.0658646616541354, 0.0649624060150377, 0.0645112781954887, 0.0640601503759398, 0.0636090225563910, 0.0631578947368421, 0.0622556390977443, 0.0613533834586466, 0.0613533834586466, 0.0604511278195489, 0.0604511278195489, 0.0595488721804511, 0.0595488721804511, 0.0586466165413534, 0.0586466165413534, 0.0577443609022557, 0.0572932330827067, 0.0568421052631579, 0.0559398496240602, 0.0554887218045113, 0.0550375939849624, 0.0550375939849624, 0.0541353383458647, 0.0541353383458647, 0.0532330827067670, 0.0527819548872180, 0.0523308270676692, 0.0518796992481203, 0.0514285714285715, 0.0505263157894738, 0.0505263157894738, 0.0496240601503759, 0.0491729323308270;
        maracuja::Spectrum<double> SensitSpectrum;
        SensitSpectrum.set(400, 950, Sensitivity);

        // Filters
        typename maracuja::Spectrum<double>::VectorX Filter1(551);
        Filter1 << 0.480610504200000, 0.481150550800000, 0.481869354200000, 0.483012580900000, 0.483803978000000, 0.484906234700000, 0.486323547400000, 0.487385940600000, 0.488922233600000, 0.488309753400000, 0.488286598200000, 0.488982353200000, 0.484850349400000, 0.475781784100000, 0.460184707600000, 0.437950935400000, 0.406959343000000, 0.368429260300000, 0.324199333200000, 0.277357692700000, 0.231475715600000, 0.188953704800000, 0.151315126400000, 0.119803066300000, 0.0937653350800000, 0.0731791257900000, 0.0570456218700000, 0.0445695495600000, 0.0350337290800000, 0.0275680851900000, 0.0218930697400000, 0.0175243425400000, 0.0141054821000000, 0.0114533329000000, 0.00935966253300000, 0.00767080068600000, 0.00632954537900000, 0.00520152151600000, 0.00426660478100000, 0.00347497075800000, 0.00279554247900000, 0.00221557498000000, 0.00171665549300000, 0.00130597814900000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
        maracuja::Spectrum<double> F1Spectrum;
        F1Spectrum.set(400, 950, Filter1);
        maracuja::Channel<double,float> F1Channel;
        F1Channel.set(0, F1Spectrum, SensitSpectrum, "Filter 0: 400nm");
        m_MSImage.addChannel(F1Channel);

        typename maracuja::Spectrum<double>::VectorX Filter2(551);
        Filter2 << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00146204203400000, 0.00315466016500000, 0.00678514123000000, 0.0143643808400000, 0.0300173306500000, 0.0596992111200000, 0.110091600400000, 0.181809520700000, 0.263378257800000, 0.337606048600000, 0.390636520400000, 0.426546554600000, 0.459470214800000, 0.501245803800000, 0.554974746700000, 0.616252174400000, 0.670852127100000, 0.706304473900000, 0.719801178000000, 0.717603530900000, 0.711896514900000, 0.710831527700000, 0.716983642600000, 0.728174285900000, 0.739736938500000, 0.747461700400000, 0.749691391000000, 0.746639938400000, 0.739436035200000, 0.729354629500000, 0.715807189900000, 0.698984985400000, 0.679526138300000, 0.658287506100000, 0.637554359400000, 0.620818557700000, 0.610143661500000, 0.606950569200000, 0.611126060500000, 0.619224433900000, 0.625530548100000, 0.621171188400000, 0.595484390300000, 0.543018417400000, 0.465607452400000, 0.375118370100000, 0.283364982600000, 0.203124275200000, 0.139681663500000, 0.0939799213400000, 0.0625847864200000, 0.0411968135800000, 0.0271958971000000, 0.0180801057800000, 0.0120595753200000, 0.00811973094900000, 0.00552618205500000, 0.00380207508800000, 0.00265549480900000, 0.00186753943600000, 0.00133273243900000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
        maracuja::Spectrum<double> F2Spectrum;
        F2Spectrum.set(400, 950, Filter2);
        maracuja::Channel<double,float> F2Channel;
        F2Channel.set(1, F2Spectrum, SensitSpectrum, "Filter 1: 450nm");
        m_MSImage.addChannel(F2Channel);

        typename maracuja::Spectrum<double>::VectorX Filter3(551);
        Filter3 << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00122505091100000, 0.00244666293300000, 0.00501194953900000, 0.0104630351100000, 0.0219941854500000, 0.0462253284500000, 0.0946668529500000, 0.180547065700000, 0.305938835100000, 0.447611923200000, 0.570035934400000, 0.641070327800000, 0.669430542000000, 0.674656066900000, 0.671306991600000, 0.667128295900000, 0.666352462800000, 0.670495224000000, 0.679106903100000, 0.691448745700000, 0.705677566500000, 0.719779663100000, 0.732710723900000, 0.742596893300000, 0.748927688600000, 0.751937484700000, 0.752867507900000, 0.752254104600000, 0.750877990700000, 0.750139389000000, 0.749361343400000, 0.749530563400000, 0.749867706300000, 0.749796600300000, 0.749592285200000, 0.747948837300000, 0.745149536100000, 0.740310211200000, 0.734094390900000, 0.725658187900000, 0.715704650900000, 0.703255081200000, 0.689470977800000, 0.674533538800000, 0.658859481800000, 0.644877166700000, 0.633101272600000, 0.624691848800000, 0.616581802400000, 0.594958305400000, 0.537778091400000, 0.432275695800000, 0.295466480300000, 0.173660545300000, 0.0780722284300000, 0.0458301639600000, 0.0232101893400000, 0.0119428002800000, 0.00635969102400000, 0.00350937217500000, 0.00201128602000000, 0.00118885070100000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
        maracuja::Spectrum<double> F3Spectrum;
        F3Spectrum.set(400, 950, Filter3);
        maracuja::Channel<double,float> F3Channel;
        F3Channel.set(2, F3Spectrum, SensitSpectrum, "Filter 2: 500nm");
        m_MSImage.addChannel(F3Channel);

        typename maracuja::Spectrum<double>::VectorX Filter4(551);
        Filter4 << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00146227508800000, 0.00227412328100000, 0.00363548457600000, 0.00594405829900000, 0.00996797561600000, 0.0171008741900000, 0.0301526927900000, 0.0556089782700000, 0.104272470500000, 0.190821495100000, 0.312971706400000, 0.431185417200000, 0.499341125500000, 0.507570266700000, 0.488546867400000, 0.471195983900000, 0.465869026200000, 0.472625923200000, 0.489141922000000, 0.512515487700000, 0.540489616400000, 0.571140174900000, 0.602469635000000, 0.631372795100000, 0.655965499900000, 0.674461746200000, 0.686140213000000, 0.690967636100000, 0.690300598100000, 0.685872650100000, 0.679007949800000, 0.670642166100000, 0.661679077100000, 0.652571106000000, 0.644729919400000, 0.639499893200000, 0.638314895600000, 0.641475677500000, 0.648160095200000, 0.656032028200000, 0.661479263300000, 0.661303405800000, 0.653197479200000, 0.636560249300000, 0.613830757100000, 0.587445755000000, 0.558088111900000, 0.523640403700000, 0.479808502200000, 0.420853271500000, 0.346889152500000, 0.267182502700000, 0.192858486200000, 0.132804689400000, 0.0892383289300000, 0.0593049383200000, 0.0394389033300000, 0.0265750312800000, 0.0183033645200000, 0.0127608633000000, 0.00909321844600000, 0.00661062002200000, 0.00488646805300000, 0.00367302417800000, 0.00279440343400000, 0.00215202689200000, 0.00167861923600000, 0.00132178753600000, 0.00104838654400000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
        maracuja::Spectrum<double> F4Spectrum;
        F4Spectrum.set(400, 950, Filter4);
        maracuja::Channel<double,float> F4Channel;
        F4Channel.set(3, F4Spectrum, SensitSpectrum, "Filter 3: 550nm");
        m_MSImage.addChannel(F4Channel);

        typename maracuja::Spectrum<double>::VectorX Filter5(551);
        Filter5 << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00105003178100000, 0.00102949805600000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00131782531700000, 0.00192825421700000, 0.00289690613700000, 0.00448208808900000, 0.00715082407000000, 0.0117741382100000, 0.0204212141000000, 0.0370717096300000, 0.0710173034700000, 0.141418056500000, 0.274617614700000, 0.471901512100000, 0.656702117900000, 0.736180877700000, 0.712076568600000, 0.654398345900000, 0.612482719400000, 0.596374168400000, 0.601851577800000, 0.622440338100000, 0.651477661100000, 0.684079437300000, 0.715680542000000, 0.742244339000000, 0.762263488800000, 0.774789733900000, 0.779908752400000, 0.778395614600000, 0.772097930900000, 0.761940155000000, 0.748262558000000, 0.732323684700000, 0.715332412700000, 0.697565765400000, 0.680449066200000, 0.664925231900000, 0.651306991600000, 0.640553588900000, 0.632725639300000, 0.628119659400000, 0.626316490200000, 0.625401001000000, 0.622365188600000, 0.612033653300000, 0.587359504700000, 0.540656738300000, 0.469145965600000, 0.380325889600000, 0.287942161600000, 0.206346111300000, 0.141379547100000, 0.0949416065200000, 0.0633775758700000, 0.0425242996200000, 0.0288586139700000, 0.0197964084100000, 0.0138129723100000, 0.00981921255600000, 0.00705643117400000, 0.00515846610100000, 0.00382257223100000, 0.00286383777900000, 0.00218161016700000, 0.00167434170800000, 0.00130222708000000, 0.00102467663600000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
        maracuja::Spectrum<double> F5Spectrum;
        F5Spectrum.set(400, 950, Filter5);
        maracuja::Channel<double,float> F5Channel;
        F5Channel.set(4, F5Spectrum, SensitSpectrum, "Filter 4: 600nm");
        m_MSImage.addChannel(F5Channel);

        typename maracuja::Spectrum<double>::VectorX Filter6(551);
        Filter
        maracuja::Spectrum<double> F6Spectrum;
        F6Spectrum.set(400, 950, Filter6);
        maracuja::Channel<double,float> F6Channel;
        F6Channel.set(5, F6Spectrum, SensitSpectrum, "Filter 5: 650nm");
        m_MSImage.addChannel(F6Channel);

        typename maracuja::Spectrum<double>::VectorX Filter7(551);
        Filter
        maracuja::Spectrum<double> F7Spectrum;
        F7Spectrum.set(400, 950, Filter7);
        maracuja::Channel<double,float> F7Channel;
        F7Channel.set(6, F7Spectrum, SensitSpectrum, "Filter 6: 700nm");
        m_MSImage.addChannel(F7Channel);

        typename maracuja::Spectrum<double>::VectorX Filter8(551);
        Filter
        maracuja::Spectrum<double> F8Spectrum;
        F8Spectrum.set(400, 950, Filter8);
        maracuja::Channel<double,float> F8Channel;
        F8Channel.set(7, F8Spectrum, SensitSpectrum, "Filter 7: 750nm");
        m_MSImage.addChannel(F8Channel);

        typename maracuja::Spectrum<double>::VectorX Filter9(551);
        Filter
        maracuja::Spectrum<double> F9Spectrum;
        F9Spectrum.set(400, 950, Filter9);
        maracuja::Channel<double,float> F9Channel;
        F9Channel.set(8, F9Spectrum, SensitSpectrum, "Filter 8: 800nm");
        m_MSImage.addChannel(F9Channel);

        typename maracuja::Spectrum<double>::VectorX Filter10(551);
        Filter
        maracuja::Spectrum<double> F10Spectrum;
        F10Spectrum.set(400, 950, Filter10);
        maracuja::Channel<double,float> F10Channel;
        F10Channel.set(9, F10Spectrum, SensitSpectrum, "Filter 9: 880nm");
        m_MSImage.addChannel(F10Channel);

        this->updateComboBox();

    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}

void MaracujaMS::on_loadImage()
{
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            std::string imagePath = QFileDialog::getOpenFileName(this, "Load Image", m_lastDir.c_str(), "Images (*.bmp *.png *.xpm *.jpg *.tif *.tiff)").toStdString();

            if( imagePath.size() > 0 )
            {
                // load image
                std::shared_ptr<cimg_library::CImg<float> > image( new cimg_library::CImg<float> );
                image->load( imagePath.c_str() );
                unsigned writeIdx = 0;
                while (QString(m_MSImage.channels()[writeIdx].name().c_str()) != ui->channel_choice->currentText() && writeIdx < m_MSImage.channels().size())
                {
                    writeIdx++;
                }
                m_MSImage.setImage(writeIdx, image);
            }

            // update the last dir
            m_lastDir = imagePath.substr( 0, imagePath.find_last_of('/') );
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}

void MaracujaMS::on_showImage()
{
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {
                // convert image to Qt
                QImage imageQt;
                cimg2qimg( m_MSImage.channels()[readIdx].image(), imageQt );

				std::cout << "readIdx: " << readIdx << std::endl;

                // set the image
                ui->view->setAxisBackground(QPixmap::fromImage(imageQt), true, Qt::IgnoreAspectRatio );
                ui->view->xAxis->setRange(0, imageQt.width() );
                ui->view->yAxis->setRange(0, imageQt.height() );
                ui->view->replot();
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}


void MaracujaMS::on_calculation()
{
    try
    {
        if (m_MSImage.channels().size() == 0)
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add channels and images."));
        }
        else
        {
            bool image_missing = false;
            int checkingIdx = 0;
            while(!image_missing && checkingIdx < m_MSImage.channels().size())
            {
                if (m_MSImage.channels()[checkingIdx].image() == NULL)
                {
                    image_missing = true;
                }
                else
                {
                    checkingIdx++;
                }
            }
            if (image_missing)
            {
                QMessageBox::critical(this, "Warning", QString("Image is missing, for at least one channel."));
            }
            else
            {
                // compute reconstruct the RGB image
                m_imageRGB = m_MSImage.rgb( ui->whitebalance->isChecked() );

                // convert image to Qt
                QImage imageQt;
                cimg2qimg( m_imageRGB, imageQt );

                // set the image
                ui->view->setAxisBackground(QPixmap::fromImage(imageQt), true, Qt::IgnoreAspectRatio );
                ui->view->xAxis->setRange(0, imageQt.width() );
                ui->view->yAxis->setRange(0, imageQt.height() );
                ui->view->replot();
            }
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}


void MaracujaMS::on_saveRGB()
{
    try
    {
        std::string filename = QFileDialog::getSaveFileName(this, "Save RGB Image", m_lastDir.c_str(), "Images (*.bmp *.png *.xpm *.jpg *.tif *.tiff)").toStdString();
        if( filename.size() > 0 )
            m_imageRGB.save( filename.c_str() );

        // update the last dir
        m_lastDir = filename.substr( 0, filename.find_last_of('/') );
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_loadMS()
{
    try
    {
        std::string filename = QFileDialog::getOpenFileName(this, "Load Multispectral Image", m_lastDir.c_str(), "MS Image (*.msx)").toStdString();
        if( filename.size() > 0 )
            m_MSImage.load( filename );

        // update the last dir
        m_lastDir = filename.substr( 0, filename.find_last_of('/') );

        this->updateComboBox();
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}


void MaracujaMS::on_saveMS()
{
    try
    {
        std::string filename = QFileDialog::getSaveFileName(this, "Save Multispectral Image", m_lastDir.c_str(), "MS Image (*.msx)").toStdString();
        if( filename.size() > 0 )
            m_MSImage.save( filename );

        // update the last dir
        m_lastDir = filename.substr( 0, filename.find_last_of('/') );
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}

void MaracujaMS::on_load_spectrum(maracuja::Spectrum<double>& spec, bool& available) {
	try
    {
        std::string filename = QFileDialog::getOpenFileName(this, "Load Spectrum Data in CSV format", m_lastDir.c_str(), "CSV (*.csv)").toStdString();
        if( filename.size() > 0 ) {
			        SSM spectrum_file;
			        spectrum_file.parseFile(filename);
			        Eigen::VectorXd wl = spectrum_file.getWavelengthsasEigen();
			        
			        std::cout << "Amount of Wavelengths: " << wl.size() << std::endl;
			        
			        double samplerate = 1;
			        if (wl.size() < 2) {
				           QMessageBox::critical(this, "Error", QString("Cannot calculate samplerate as the spectrum contains less than two values - using samplerate=1!"));
				           return;
			        } else {
				           samplerate = fabs(wl[1] - wl[0]);
			        }
			        
			        std::cout << "Loading spectrum - calculated Samplerate: " << samplerate << std::endl;
			        for (int i=0; i<10; i++) {
				           std::cout << "WL " << wl[i] << std::endl;
			        }
			        
					maracuja::Spectrum<double> tmp(spectrum_file.getFirstWavelength(), spectrum_file.getLastWavelength(), spectrum_file.getPeaksasEigen());
					spec = tmp;
					//spec.set(spectrum_file.getFirstWavelength(), spectrum_file.getLastWavelength(), spectrum_file.getPeaksasEigen(), samplerate);
		        	available = true;
		    } else {
			        QMessageBox::critical(this, "Error", QString("Could not load spectrum as it is empty!"));
			        return;
			   }

       // update the last dir
       m_lastDir = filename.substr( 0, filename.find_last_of('/') );
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
}

void MaracujaMS::on_show_spectrum(const maracuja::Spectrum<double>& spec, int graph) {
    QVector<double> key(spec.data().size());
    QVector<double> value(spec.data().size());
    Eigen::VectorXd gdata = spec.data();
    double samplerate = spec.samplerate();
    double end = spec.end();
	
    for (int i=0; i<gdata.size(); i++) {
        key[i] = spec.start() + i*samplerate;
        value[i] = gdata[i];
	   }
	
    ui->view->graph(graph)->setData(key, value);
    ui->view->graph(graph)->rescaleAxes();
    ui->view->replot();
	
}

void MaracujaMS::on_hide_spectrum(int graph) {
    QVector<double> key(0);
    QVector<double> value(0);
    
    ui->view->graph(graph)->setData(key, value);
    //ui->view->graph(graph)->rescaleAxes();
    ui->view->replot();

}

void MaracujaMS::on_load_spectrum1() {
    this->on_load_spectrum(this->a, this->a_is_available);
}

void MaracujaMS::on_load_spectrum2() {
	   this->on_load_spectrum(this->b, this->b_is_available);
}

void MaracujaMS::on_show_spectrum1() {
    if (!this->a_is_available)
    {
        QMessageBox::critical(this, "Warning", QString("You need first to load or add a spectrum first."));
        return;
    }
    
    ui->view->graph(0)->setPen(QPen(Qt::blue));
    this->on_show_spectrum(this->a, 0);
}

void MaracujaMS::on_show_spectrum2() {
    if (!this->b_is_available)
    {
        QMessageBox::critical(this, "Warning", QString("You need first to load or add a spectrum first."));
        return;
    }
    
    ui->view->graph(1)->setPen(QPen(Qt::red));
    this->on_show_spectrum(this->b, 1);
}

void MaracujaMS::on_hide_spectrum1() {
    this->on_hide_spectrum(0);
}

void MaracujaMS::on_hide_spectrum2() {
    this->on_hide_spectrum(1);
}

void MaracujaMS::on_multiply_spectra() {
    if (!this->a_is_available || !this->b_is_available)
    {
        QMessageBox::critical(this, "Warning", QString("You need first to load or add two spectra first."));
        return;
    }
	
    //maracuja::Spectrum<double> result = a * b;
    //result = mult.pairwiseMultiplication(this->b, 1, 0.2);
    //result = mult.adaptTo(this->b.start(), this->b.end(), 0.2);
    //result = mult.adaptTo(this->b, true);
	   maracuja::Spectrum<double> result = a;
	   result.resample(m_MSImage.channels()[4].filter());
    result.normalize();	   
	   
    ui->view->graph(2)->setPen(QPen(Qt::green));
    this->on_show_spectrum(result, 2);
}

void MaracujaMS::on_add_dummy_spectra() {
    /*SpecOpsTest test;
    test.RandomARandomBEqualSize(this->a, this->b);
    this->a_is_available = true;
    this->b_is_available = true;
    QMessageBox::information(this, "Success", QString("Dummy data successfully applied. You may now display and multiply spectra."));*/
}

void MaracujaMS::on_apply_spectrum(maracuja::Spectrum<double>& spec) {
    try
    {
        if (m_MSImage.channels().size() == 0)
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add channels and images."));
        }
        else
        {
            bool image_missing = false;
            int checkingIdx = 0;
            while(!image_missing && checkingIdx < m_MSImage.channels().size())
            {
                if (m_MSImage.channels()[checkingIdx].image() == NULL)
                {
                    image_missing = true;
                }
                else
                {
                    checkingIdx++;
                }
            }
            if (image_missing)
            {
                QMessageBox::critical(this, "Warning", QString("Image is missing, for at least one channel."));
            }
            else
            {
                // compute reconstruct the RGB image
                m_imageRGB = m_MSImage.convolute( spec );

                // convert image to Qt
                QImage imageQt;
                cimg2qimg( m_imageRGB, imageQt );

                // set the image
                ui->view->setAxisBackground(QPixmap::fromImage(imageQt), true, Qt::IgnoreAspectRatio );
                ui->view->xAxis->setRange(0, imageQt.width() );
                ui->view->yAxis->setRange(0, imageQt.height() );
                ui->view->replot();

				/*try
			    {
			        std::string filename = QFileDialog::getSaveFileName(this, "Save Segmented Image", m_lastDir.c_str(), "Images (*.bmp *.png *.xpm *.jpg *.tif *.tiff)").toStdString();
			        if( filename.size() > 0 )
			            m_imageRGB.save( filename.c_str() );

			        // update the last dir
			        m_lastDir = filename.substr( 0, filename.find_last_of('/') );
			    }
			    catch( std::exception &e )
			    {
			        ui->statusBar->showMessage( QString( e.what() ), 5000 );
			        std::cerr << e.what() << std::endl;
			        QMessageBox::critical(this, "Error", QString( e.what() ) );
			    }*/
			
            }
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }
    
}

void MaracujaMS::on_apply_spectrum1() {
    if (!this->a_is_available)
    {
        QMessageBox::critical(this, "Warning", QString("You need first to load or add a spectrum first."));
        return;
    }
    
    this->on_apply_spectrum(this->a);
}

void MaracujaMS::on_apply_spectrum2() {
    if (!this->a_is_available)
    {
        QMessageBox::critical(this, "Warning", QString("You need first to load or add a spectrum first."));
        return;
    }
    
    this->on_apply_spectrum(this->b);
}


void MaracujaMS::on_toggle_filter_spectrum() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                if (this->filter_on){
                    this->on_hide_spectrum(3);
                    this->filter_on = false;
                } else {
                    ui->view->graph(3)->setPen(QPen(Qt::blue));
                    this->on_show_spectrum(m_MSImage.channels()[readIdx].filter(), 3);
                    this->filter_on = true;
                }
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_toggle_sensor_spectrum() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                if (this->sensor_on){
                    this->on_hide_spectrum(4);
                    this->sensor_on = false;
                } else {
                    ui->view->graph(4)->setPen(QPen(Qt::green));
                    this->on_show_spectrum(m_MSImage.channels()[readIdx].sensor(), 4);
                    this->sensor_on = true;
                }
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_toggle_filter_sensor_convolution() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                if (this->filter_sensor_on){
                    this->on_hide_spectrum(5);
                    this->filter_sensor_on = false;
                } else {
                    maracuja::Spectrum<double> filter = m_MSImage.channels()[readIdx].filter();
                    maracuja::Spectrum<double> sensor = m_MSImage.channels()[readIdx].sensor();    
    
                    maracuja::Spectrum<double> testspec = filter * sensor;
          			
                    ui->view->graph(5)->setPen(QPen(Qt::yellow));
                    this->on_show_spectrum(testspec, 5);
                    this->filter_sensor_on = true;
                }
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_apply_filter() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                maracuja::Spectrum<double> filter = m_MSImage.channels()[readIdx].filter();
                this->on_apply_spectrum(filter);
                
                // Test
                maracuja::Spectrum<double> ref = m_MSImage.channels()[4].filter();
    
            	   // resample spectrum to fit the size of the reference spectrum
                maracuja::Spectrum<double> tmp = filter;
                tmp.resample(ref);
                tmp.adaptArea(ref.area());
                
                ui->view->graph(5)->setPen(QPen(Qt::red));
                this->on_show_spectrum(tmp, 5);
                // Test end
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_apply_sensor() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                maracuja::Spectrum<double> sensor = m_MSImage.channels()[readIdx].sensor();
                this->on_apply_spectrum(sensor);
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


void MaracujaMS::on_apply_both() {
    try
    {
        if (m_MSImage.channels().size() > 0)
        {
            unsigned readIdx = 0;
            while (QString(m_MSImage.channels()[readIdx].name().c_str()) != ui->channel_choice->currentText() && readIdx < m_MSImage.channels().size())
            {
                readIdx++;
            }
            if( m_MSImage.channels()[readIdx].image() == NULL ) // there is no image for the channel
            {
                QMessageBox::critical(this, "Warning", QString("No image is loaded for the current channel."));
            }
            else
            {   
                maracuja::Spectrum<double> filter = m_MSImage.channels()[readIdx].filter();
                maracuja::Spectrum<double> sensor = m_MSImage.channels()[readIdx].sensor();    
    
                maracuja::Spectrum<double> testspec = filter * sensor;
                    
                this->on_apply_spectrum(testspec);
            }
        }
        else
        {
            QMessageBox::critical(this, "Warning", QString("You need first to add a channel and an image."));
        }
    }
    catch( std::exception &e )
    {
        ui->statusBar->showMessage( QString( e.what() ), 5000 );
        std::cerr << e.what() << std::endl;
        QMessageBox::critical(this, "Error", QString( e.what() ) );
    }

}


/*void MaracujaMS::cimg2qimg( const cimg_library::CImg<uint8_t>& src, QImage& dst )
{
    if( src.spectrum() == 3 )
    {
        dst = QImage(src.width(), src.height(), QImage::Format_RGB888);
        cimg_forXY( src, x, y )
            {
               dst.setPixel( x, y, qRgb(src( x, y, 0 ), src( x, y, 1 ), src( x, y, 2 ) ) );
            }
    }
    else
        dst = QImage( src.data(), src.width(), src.height(), QImage::Format_Indexed8 );
}*/

void MaracujaMS::cimg2qimg( const cimg_library::CImg<float>& src, QImage& dst )
{
    if( src.spectrum() == 3 )
    {
        dst = QImage(src.width(), src.height(), QImage::Format_RGB888);
        cimg_forXY( src, x, y )
            {
               dst.setPixel( x, y, qRgb(src( x, y, 0 ), src( x, y, 1 ), src( x, y, 2 ) ) );
            }
    }
    else {
        uchar tmp_data[src.size()];
        for (int i=0; i<src.size(); i++) {
            tmp_data[i] = (uchar) src.data()[i];
        }
        dst = QImage( tmp_data, src.width(), src.height(), QImage::Format_Indexed8 );
    }
        
}
