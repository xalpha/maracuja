/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// This file is part of maracuja, a C++ library for multispectral images       //
//                                                                             //
// Copyright (C) 2013 Alexandru Duliu, Anne-Claire Morvan                      //
//                                                                             //
// maracuja is free software; you can redistribute it and/or                   //
// modify it under the terms of the GNU Lesser General Public                  //
// License as published by the Free Software Foundation; either                //
// version 3 of the License, or (at your option) any later version.            //
//                                                                             //
// maracuja is distributed in the hope that it will be useful, but WITHOUT ANY //
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   //
// FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License or the  //
// GNU General Public License for more details.                                //
//                                                                             //
// You should have received a copy of the GNU Lesser General Public            //
// License along with maracuja. If not, see <http://www.gnu.org/licenses/>.    //
//                                                                             //
////////////////////////////////////////////////////////////////////////////////


#pragma once

///
/// \file    MSImage.hpp
/// \class   MSImage
///
/// \package maracuja
/// \version 0.1.0
///
/// \brief   base class for image segmentation
///
/// \details this is base container for multispectral images
///
/// \author  Alexandru Duliu, Anne-Claire Morvan
/// \date    Jan 15, 2013
///

#include <iostream>
#include <maracuja/util.hpp>
#include <maracuja/Spectrum.hpp>
#include <maracuja/Channel.hpp>

#include <tinyxml2.h>


namespace maracuja
{

template <typename T, typename Ti>
class MSImage
{
public:
    typedef typename Channel<T,Ti>::Image Image;
    typedef typename Spectrum<T>::VectorX VectorX;

public:
    MSImage( size_t channels=0 );
    MSImage( const MSImage& msi );
    virtual ~MSImage();

    void operator =( const MSImage& msi );

    void clear();
    void addChannel( const Channel<T,Ti>& channel);
    void setImage(unsigned channelIdx, std::shared_ptr<Image> imageToAdd);
    void setTimestamp( const std::string& timestamp );

    const std::vector<Channel<T,Ti> >& channels() const;
    std::vector<Channel<T,Ti> >& channels();
    const std::string& timestamp() const;

    std::vector<T> computeCoefficients(const Spectrum<T> &spectrum);
    std::vector<std::vector<T> > computeBalancedCoefficients(const std::vector<Spectrum<T> > &spectrums);

    Image convolute( const Spectrum<T>& spectrum);
    Image convolute( const std::vector<Spectrum<T> >& spectra, bool balanced=false );

    Image rgb( bool whitebalance=true );

    void load( const std::string& filename );
    void save( const std::string& filename );

protected:
    void checkChannels();

    std::string getElementValue( tinyxml2::XMLNode* node, std::string name );
    void appendTextElement( tinyxml2::XMLDocument& doc, tinyxml2::XMLNode& node, std::string name, std::string val );

protected:
    std::vector<Channel<T,Ti> > m_channels;
    std::string m_timestamp;
};


/////
// Implementation
///

template <typename T, typename Ti>
inline MSImage<T,Ti>::MSImage( size_t channels )
{
    if( channels > 0 )
        m_channels.resize(channels);
}


template <typename T, typename Ti>
inline MSImage<T,Ti>::MSImage( const MSImage<T,Ti>& msi )
{
    *this = msi;
}


template <typename T, typename Ti>
inline MSImage<T,Ti>::~MSImage() {
    // TODO Auto-generated destructor stub
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::operator =( const MSImage<T,Ti>& msi )
{
    m_channels = msi.m_channels;
    m_timestamp = msi.m_timestamp;
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::clear()
{
    m_channels.resize(0);
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::addChannel( const Channel<T,Ti>& channel)
{
    m_channels.push_back(channel);
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::setImage(unsigned channelIdx, std::shared_ptr<Image> imageToAdd)
{
    m_channels[channelIdx].set(imageToAdd);
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::setTimestamp( const std::string& timestamp )
{
    m_timestamp = timestamp;
}


template <typename T, typename Ti>
inline const std::vector<Channel<T,Ti> >& MSImage<T,Ti>::channels() const
{
    return m_channels;
}


template <typename T, typename Ti>
inline std::vector<Channel<T,Ti> >& MSImage<T,Ti>::channels()
{
    return m_channels;
}


template <typename T, typename Ti>
inline const std::string& MSImage<T,Ti>::timestamp() const
{
    return m_timestamp;
}


template <typename T, typename Ti>
inline std::vector<T> MSImage<T,Ti>::computeCoefficients( const Spectrum<T>& spectrum)
{
    // check all is well
    checkChannels();

    // calculation of the multiplicative coefficient for each channel for the considered spectrum
    std::vector<T> coeffs(m_channels.size());
    T compensationCoeff;
    for (unsigned idx = 0; idx < m_channels.size(); idx++)
    {
        T dp;
        VectorX spectralData = spectrum.data();
        Spectrum<T> tmp = m_channels[idx].filter();
        VectorX filter_i = tmp.data();
        coeffs[idx] = spectralData.adjoint()*(filter_i);
        coeffs[idx] = coeffs[idx]/filter_i.sum();
        std::cout << "coeff " << idx << ": " << coeffs[idx] << std::endl;
        compensationCoeff = m_channels[idx].lossCalculation();
        // compensation of the losses due to the filter and the camera sensitivity for each channel
        coeffs[idx] = coeffs[idx] * compensationCoeff;
        std::cout << "coeff " << idx << " after compensation: " << coeffs[idx] << std::endl;
    }

    return coeffs;
}


template <typename T, typename Ti>
inline std::vector<std::vector<T> > MSImage<T,Ti>::computeBalancedCoefficients( const std::vector<Spectrum<T> >& spectrums)
{
    // init the coefficients
    std::vector<std::vector<T> > allCoeffs(spectrums.size());
    for (unsigned idx = 0; idx < spectrums.size(); idx++)
        allCoeffs[idx] = computeCoefficients(spectrums[idx]);

    // white balance for a "white signal" (1 for every wavelength)

    // calculation of the theoretical value for each channel
    std::vector<T> spectralValues(m_channels.size());
    VectorX spectrumTmp;
    for (unsigned idx = 0; idx < m_channels.size(); idx++)
    {
        spectrumTmp = m_channels[idx].filter().data(); // filter's values
        for (unsigned wavelengthIdx = 0; wavelengthIdx < spectrumTmp.size(); wavelengthIdx++)
            spectrumTmp(wavelengthIdx) = spectrumTmp(wavelengthIdx) * m_channels[idx].sensor().data()(wavelengthIdx);
        spectralValues[idx] = spectrumTmp.sum();
    }

    std::vector<T> expected_RGB(spectrums.size());
    std::vector<T> whiteBalanceCoeffs(spectrums.size());
    std::vector<T> reconstructedRGB(spectrums.size());
    double correctionCoeff;

    for (unsigned spectrumIdx = 0; spectrumIdx < spectrums.size(); spectrumIdx++)
    {
        // calculation of the expected RGB values and the white balance coefficients
        expected_RGB[spectrumIdx] = spectrums[spectrumIdx].data().sum();
        if (expected_RGB[spectrumIdx] != 0)
            whiteBalanceCoeffs[spectrumIdx] = 255/expected_RGB[spectrumIdx];

        // calculation of the RGB values that we reconstruct with the coefficients
        for (unsigned channelIdx = 0; channelIdx < m_channels.size(); channelIdx++)
            reconstructedRGB[spectrumIdx] = reconstructedRGB[spectrumIdx] + allCoeffs[spectrumIdx][channelIdx] * spectralValues[channelIdx];

        // white balance and RGB loss compensation
        correctionCoeff = whiteBalanceCoeffs[spectrumIdx] * expected_RGB[spectrumIdx] / reconstructedRGB[spectrumIdx];
        for (unsigned channelIdx = 0; channelIdx < m_channels.size(); channelIdx++)
            allCoeffs[spectrumIdx][channelIdx] = allCoeffs[spectrumIdx][channelIdx] * correctionCoeff * spectralValues[channelIdx] / 255;
            // allCoeffs[RGBidx][channelIdx] = allCoeffs[RGBidx][channelIdx] * correctionCoeff; // if the white balance is not already done in the picture
    }

    return allCoeffs;
}

template <typename T, typename Ti>
inline typename MSImage<T,Ti>::Image MSImage<T,Ti>::convolute(const Spectrum<T> &spectrum)
{
    Spectrum<T> ref = m_channels[4].filter();
    /*Spectrum<T> filter = m_channels[0].filter();
    Spectrum<T> sensor = m_channels[0].sensor();
    Spectrum<T> ref = filter * sensor;
    for (int i=1; i<m_channels.size(); i++) {
        filter = m_channels[i].filter();
        sensor = m_channels[i].sensor();
        ref = ref + (filter * sensor);
    }*/
    
	   // resample spectrum to fit the size of the reference spectrum
    Spectrum<T> tmp = spectrum;
    tmp.resample(ref);
    //tmp.adaptArea(ref.area());
	
    // calculation of the multiplicative coefficient for each channel for the considered spectrum
    std::vector<T> coeffs = computeCoefficients(tmp);

    // multiplication of the images by the previously calculated coefficients
    Image result( m_channels[0].image().width(),
                  m_channels[0].image().height(),
                  1, 1, 0 );

    // reconstruct the image
    for( size_t i=0; i<m_channels.size(); i++ ) {
        std::cout << "Channel " << i << " Max Pixel value: " << m_channels[i].image().max() << std::endl;
        result += coeffs[i] * m_channels[i].image();
    }
    std::cout << "Max Pixel value: " << result.max() << std::endl; 
        

    return result;
}


template <typename T, typename Ti>
inline typename MSImage<T,Ti>::Image MSImage<T,Ti>::convolute( const std::vector<Spectrum<T> >& spectra, bool balanced )
{
    // init stuff
    typename MSImage<T,Ti>::Image result( m_channels[0].image().width(),
                                          m_channels[0].image().height(),
                                          1, spectra.size(), 0 );

    // compute coefficients and recover the image
    std::vector<std::vector<T> > coeffs;
    if( balanced )
    {
        // compute balanced coefficients
        coeffs = computeBalancedCoefficients( spectra );

        // assemble the image
        for( int c=0; c<result.spectrum(); c++ )
            for( size_t i=0; i<m_channels.size(); i++ )
                result.get_shared_channel(c) += coeffs[c][i] * m_channels[i].image();
    }
    else
    {
        // compute coefficients
        coeffs.resize( spectra.size() );
        for( unsigned s = 0; s < spectra.size(); s++ )
            coeffs[s] = computeCoefficients( spectra[s] );

        std::vector<cimg_library::CImg<T> > channels(m_channels.size());
        for( size_t c=0; c<m_channels.size(); c++ )
            channels[c] = m_channels[c].image();

        // assemble the image
        cimg_library::CImg<T> resultF( m_channels[0].image().width(),
                                       m_channels[0].image().height(),
                                       1, spectra.size(), 0 );
        for( int c=0; c<result.spectrum(); c++ )
            for( size_t i=0; i<m_channels.size(); i++ )
                resultF.get_shared_channel(c) += coeffs[c][i] * channels[i];

        resultF.normalize( 0, 255 );
        result = resultF;
    }

    return result;
}


template <typename T, typename Ti>
inline typename MSImage<T,Ti>::Image MSImage<T,Ti>::rgb( bool whitebalance )
{
    // RGB
    VectorX R(551);
    R << 0.524911032028469, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.551601423487544, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.533807829181495, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.533807829181495, 0.542704626334519, 0.533807829181495, 0.560498220640569, 0.560498220640569, 0.578291814946619, 0.587188612099644, 0.604982206405693, 0.622775800711743, 0.640569395017793, 0.658362989323843, 0.676156583629893, 0.685053380782918, 0.693950177935943, 0.702846975088968, 0.711743772241992, 0.738434163701068, 0.738434163701068, 0.756227758007117, 0.756227758007117, 0.765124555160142, 0.765124555160142, 0.756227758007117, 0.756227758007117, 0.756227758007117, 0.742882562277579, 0.729537366548042, 0.711743772241992, 0.693950177935943, 0.658362989323843, 0.622775800711743, 0.604982206405693, 0.569395017793594, 0.533807829181495, 0.498220640569395, 0.462633451957295, 0.404804270462633, 0.404804270462633, 0.346975088967971, 0.311387900355872, 0.275800711743772, 0.240213523131672, 0.204626334519572, 0.177935943060498, 0.142348754448398, 0.115658362989324, 0.0800711743772240, 0.0622775800711741, 0.0266903914590744, 0.0177935943060494, 0.00889679715302449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0978647686832739, 0.142348754448398, 0.213523131672598, 0.293594306049822, 0.382562277580071, 0.480427046263345, 0.603005140371688, 0.676156583629893, 0.782918149466192, 0.871886120996441, 0.968762356662713, 1.05871886120996, 1.16548042704626, 1.20996441281139, 1.30782918149466, 1.40569395017794, 1.51245551601423, 1.61032028469751, 1.71708185053381, 1.79715302491103, 1.89679715302491, 1.95507117437722, 2.03736654804270, 2.08185053380783, 2.15302491103203, 2.15302491103203, 2.22419928825623, 2.24199288256228, 2.25978647686833, 2.31316725978648, 2.34875444839858, 2.39323843416370, 2.41992882562278, 2.45551601423488, 2.48220640569395, 2.50889679715302, 2.54448398576512, 2.57413997627521, 2.59786476868327, 2.63345195729537, 2.65124555160142, 2.68683274021352, 2.70462633451957, 2.71352313167260, 2.73131672597865, 2.74911032028470, 2.76690391459075, 2.77580071174377, 2.79359430604982, 2.80249110320285, 2.82028469750890, 2.82028469750890, 2.82918149466192, 2.83807829181495, 2.82918149466192, 2.82918149466192, 2.82918149466192, 2.82028469750890, 2.82028469750890, 2.82028469750890, 2.82028469750890, 2.80249110320285, 2.80249110320285, 2.79804270462633, 2.79359430604982, 2.78469750889680, 2.78469750889680, 2.77580071174377, 2.76690391459075, 2.76690391459075, 2.74911032028470, 2.74911032028470, 2.74911032028470, 2.74021352313167, 2.73131672597865, 2.73131672597865, 2.73131672597865, 2.73131672597865, 2.73131672597865, 2.72241992882562, 2.71352313167260, 2.71352313167260, 2.71352313167260, 2.71352313167260, 2.71352313167260, 2.69572953736655, 2.69572953736655, 2.69572953736655, 2.69572953736655, 2.69572953736655, 2.67793594306050, 2.67793594306050, 2.67793594306050, 2.67793594306050, 2.66014234875445, 2.66014234875445, 2.66014234875445, 2.66014234875445, 2.65569395017794, 2.65124555160142, 2.64234875444840, 2.64234875444840, 2.63345195729537, 2.62455516014235, 2.62455516014235, 2.60676156583630, 2.60676156583630, 2.60676156583630, 2.58896797153025, 2.58896797153025, 2.58896797153025, 2.57117437722420, 2.57117437722420, 2.57117437722420, 2.56227758007117, 2.55338078291815, 2.55338078291815, 2.55338078291815, 2.53558718861210, 2.53558718861210, 2.52669039145907, 2.51779359430605, 2.51779359430605, 2.50889679715302, 2.50000000000000, 2.50000000000000, 2.49110320284698, 2.48220640569395, 2.48220640569395, 2.47330960854093, 2.46441281138790, 2.46441281138790, 2.45551601423488, 2.45106761565836, 2.44661921708185, 2.44661921708185, 2.42882562277580, 2.42882562277580, 2.42882562277580, 2.41992882562278, 2.41103202846975, 2.41103202846975, 2.41103202846975, 2.39323843416370, 2.39323843416370, 2.38434163701068, 2.37544483985765, 2.37544483985765, 2.36654804270463, 2.35765124555160, 2.35765124555160, 2.35765124555160, 2.35765124555160, 2.35765124555160, 2.34875444839858, 2.34875444839858, 2.34875444839858, 2.34875444839858, 2.34875444839858, 2.34875444839858, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33985765124555, 2.33096085409253, 2.33096085409253, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.32206405693950, 2.31316725978648, 2.30427046263345, 2.30427046263345, 2.30427046263345, 2.30427046263345, 2.30427046263345, 2.30427046263345, 2.30427046263345, 2.28647686832740, 2.28647686832740, 2.28647686832740, 2.28647686832740, 2.28647686832740, 2.27758007117438, 2.26868327402135, 2.26868327402135, 2.26868327402135, 2.26868327402135, 2.25088967971530, 2.25088967971530, 2.25088967971530, 2.25088967971530, 2.24199288256228, 2.23309608540925, 2.23309608540925, 2.23309608540925, 2.23309608540925, 2.21530249110320, 2.21530249110320, 2.20640569395018, 2.19750889679715, 2.19750889679715, 2.19750889679715, 2.17971530249110, 2.17971530249110, 2.16192170818505, 2.16192170818505, 2.16192170818505, 2.16192170818505, 2.14412811387900, 2.14412811387900, 2.14412811387900, 2.13523131672598, 2.12633451957295, 2.12633451957295, 2.12633451957295, 2.12633451957295, 2.10854092526690, 2.10854092526690, 2.10854092526690, 2.09074733096085, 2.09074733096085, 2.09074733096085, 2.09074733096085, 2.08185053380783, 2.07295373665480, 2.07295373665480, 2.07295373665480, 2.05516014234875, 2.05516014234875, 2.05516014234875, 2.03736654804270, 2.03736654804270, 2.03736654804270, 2.02846975088968, 2.01957295373665, 2.01957295373665, 2.00177935943061, 2.00177935943061, 1.99288256227758, 1.99288256227758, 1.99288256227758, 1.95729537366548, 1.95284697508897, 1.94839857651246, 1.94839857651246, 1.93950177935943, 1.93060498220641, 1.91281138790036, 1.91281138790036, 1.89501779359431, 1.88612099644128, 1.87722419928826, 1.86832740213523, 1.85943060498221, 1.84163701067616, 1.84163701067616, 1.82384341637011, 1.80604982206406, 1.80604982206406, 1.80604982206406, 1.78825622775801, 1.77935943060498, 1.77046263345196, 1.75266903914591, 1.74377224199288, 1.73487544483986, 1.71708185053381, 1.70818505338078, 1.69928825622776, 1.68149466192171, 1.67259786476868, 1.66370106761566, 1.64590747330961, 1.63701067615658, 1.62811387900356, 1.61032028469751, 1.60142348754448, 1.59252669039146, 1.57473309608541, 1.56583629893238, 1.55693950177936, 1.54804270462633, 1.53469750889680, 1.52135231316726, 1.50355871886121, 1.49466192170818, 1.48576512455516, 1.48576512455516, 1.45907473309609, 1.45017793594306, 1.43238434163701, 1.42348754448399, 1.41459074733096, 1.39679715302491, 1.39234875444840, 1.38790035587189, 1.37900355871886, 1.36120996441281, 1.35231316725979, 1.34341637010676, 1.32562277580071, 1.30782918149466, 1.30782918149466, 1.29003558718861, 1.29003558718861, 1.27224199288256, 1.26334519572954, 1.23665480427046, 1.23665480427046, 1.21886120996441, 1.20996441281139, 1.20106761565836, 1.18327402135231, 1.17437722419929, 1.16548042704626, 1.14768683274021, 1.13879003558719, 1.12989323843416, 1.11209964412811, 1.10320284697509, 1.09430604982206, 1.08540925266904, 1.07651245551601, 1.05871886120996, 1.05871886120996, 1.04092526690391, 1.04092526690391, 1.02313167259786, 1.02313167259786, 1.01423487544484, 1.00533807829181, 1.00533807829181, 0.996441281138790, 0.996441281138790, 0.960854092526690, 0.951957295373665, 0.951957295373665, 0.934163701067615, 0.916370106761566, 0.916370106761566, 0.907473309608540, 0.898576512455516, 0.880782918149466, 0.880782918149466, 0.862989323843416, 0.854092526690391, 0.818505338078292, 0.845195729537366, 0.827402135231316, 0.827402135231316, 0.809608540925266, 0.809608540925266, 0.809608540925266, 0.791814946619216, 0.791814946619216, 0.774021352313167, 0.774021352313167, 0.774021352313167, 0.756227758007117, 0.756227758007117, 0.756227758007117, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.720640569395018, 0.720640569395018, 0.720640569395018, 0.711743772241992, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.685053380782918, 0.685053380782918, 0.685053380782918, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0;
    maracuja::Spectrum<T> RSpectrum;
    RSpectrum.set(400, 950, R);

    VectorX G(551);
    G << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0177935943060490, 0.0355871886120989, 0.0800711743772240, 0.106761565836298, 0.142348754448398, 0.177935943060498, 0.222419928825622, 0.258007117437722, 0.302491103202846, 0.346975088967971, 0.409252669039145, 0.427046263345195, 0.489323843416369, 0.524911032028469, 0.578291814946619, 0.596085409252669, 0.667259786476868, 0.702846975088968, 0.774021352313167, 0.809608540925266, 0.889679715302491, 0.925266903914590, 1.01067615658363, 1.03024911032028, 1.04982206405694, 1.12989323843416, 1.18327402135231, 1.26334519572954, 1.32562277580071, 1.39679715302491, 1.46797153024911, 1.55693950177936, 1.61921708185053, 1.71708185053381, 1.76156583629893, 1.87722419928826, 1.92425012709710, 2.04626334519573, 2.10854092526690, 2.20640569395018, 2.25978647686833, 2.36654804270463, 2.42882562277580, 2.50000000000000, 2.53558718861210, 2.66903914590747, 2.66192170818505, 2.74911032028470, 2.79359430604982, 2.84697508896797, 2.89145907473310, 2.92704626334520, 2.94483985765125, 2.97153024911032, 2.98932384341637, 2.99822064056939, 3.01601423487544, 3.03380782918149, 3.03380782918149, 3.03380782918149, 3.05160142348754, 3.06939501779359, 3.08718861209964, 3.08718861209964, 3.10498220640569, 3.10498220640569, 3.10498220640569, 3.12277580071174, 3.12277580071174, 3.12277580071174, 3.14056939501779, 3.14056939501779, 3.15836298932384, 3.15836298932384, 3.16725978647687, 3.17615658362989, 3.19395017793594, 3.19395017793594, 3.19395017793594, 3.21174377224199, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.23843416370107, 3.23843416370107, 3.24733096085409, 3.24733096085409, 3.24733096085409, 3.23843416370107, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.22953736654804, 3.19395017793594, 3.18505338078292, 3.16281138790036, 3.14056939501779, 3.11387900355872, 3.09608540925267, 3.06939501779359, 3.03380782918149, 3.00711743772242, 2.97153024911032, 2.92704626334520, 2.90035587188612, 2.85587188612100, 2.82028469750890, 2.78469750889680, 2.74911032028470, 2.69572953736655, 2.66903914590747, 2.61565836298932, 2.58896797153025, 2.54448398576512, 2.50889679715302, 2.45551601423488, 2.41992882562278, 2.35765124555160, 2.33096085409253, 2.26868327402135, 2.23309608540925, 2.16192170818505, 2.13523131672598, 2.07295373665480, 2.05516014234875, 2.03736654804270, 1.96441281138790, 1.92170818505338, 1.85943060498221, 1.80604982206406, 1.73487544483986, 1.69928825622776, 1.62811387900356, 1.59252669039146, 1.52135231316726, 1.48576512455516, 1.41459074733096, 1.37900355871886, 1.30782918149466, 1.26334519572954, 1.20106761565836, 1.15658362989324, 1.10320284697509, 1.06761565836299, 1.01423487544484, 0.956405693950178, 0.916370106761566, 0.871886120996441, 0.827402135231316, 0.791814946619216, 0.729537366548042, 0.693950177935943, 0.649466192170818, 0.622775800711743, 0.578291814946619, 0.533807829181495, 0.489323843416369, 0.453736654804270, 0.400355871886121, 0.373665480427046, 0.355871886120996, 0.338078291814946, 0.302491103202846, 0.284697508896797, 0.258007117437722, 0.240213523131672, 0.213523131672598, 0.142348754448398, 0.133451957295374, 0.106761565836298, 0.0889679715302485, 0.0622775800711741, 0.0533807829181487, 0.0355871886120989, 0.0266903914590744, 0.0133451957295367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00889679715302449, 0.00889679715302449, 0.00889679715302449, 0.0177935943060490, 0.0266903914590744, 0.0266903914590744, 0.0266903914590744, 0.0355871886120989, 0.0444839857651242, 0.0444839857651242, 0.0444839857651242, 0.0622775800711741, 0.0622775800711741, 0.0622775800711741, 0.0800711743772240, 0.0978647686832739, 0.0978647686832739, 0.115658362989324, 0.115658362989324, 0.133451957295374, 0.133451957295374, 0.142348754448398, 0.151245551601423, 0.169039145907473, 0.177935943060498, 0.186832740213522, 0.204626334519572, 0.204626334519572, 0.213523131672598, 0.222419928825622, 0.240213523131672, 0.231316725978648, 0.249110320284697, 0.266903914590747, 0.266903914590747, 0.275800711743772, 0.284697508896797, 0.284697508896797, 0.293594306049822, 0.293594306049822, 0.293594306049822, 0.293594306049822, 0.302491103202846, 0.302491103202846, 0.302491103202846, 0.302491103202846, 0.302491103202846, 0.302491103202846, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.320284697508896, 0.329181494661921, 0.329181494661921, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.364768683274021, 0.364768683274021, 0.364768683274021, 0.373665480427046, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.400355871886121, 0.400355871886121, 0.400355871886121, 0.418149466192171, 0.418149466192171, 0.418149466192171, 0.435943060498221, 0.435943060498221, 0.444839857651245, 0.453736654804270, 0.453736654804270, 0.471530249110320, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.507117437722419, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.542704626334519, 0.560498220640569, 0.560498220640569, 0.560498220640569, 0.578291814946619, 0.587188612099644, 0.596085409252669, 0.596085409252669, 0.613879003558719, 0.613879003558719, 0.622775800711743, 0.631672597864768, 0.631672597864768, 0.640569395017793, 0.649466192170818, 0.649466192170818, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0.685053380782918, 0.685053380782918, 0.693950177935943, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.676156583629893, 0.693950177935943, 0.711743772241992, 0.716192170818505, 0.720640569395018, 0.720640569395018, 0.729537366548042, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.738434163701068, 0.729537366548042, 0.729537366548042, 0.729537366548042, 0.729537366548042, 0.720640569395018, 0.720640569395018, 0.720640569395018, 0.711743772241992, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.702846975088968, 0.693950177935943, 0.685053380782918, 0.685053380782918, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0.667259786476868, 0.649466192170818, 0.649466192170818, 0.631672597864768, 0.631672597864768, 0.631672597864768, 0.631672597864768, 0.622775800711743, 0.613879003558719, 0.613879003558719, 0.613879003558719, 0.596085409252669, 0.596085409252669, 0.596085409252669, 0.596085409252669, 0.587188612099644, 0.578291814946619, 0.578291814946619, 0.578291814946619, 0.560498220640569, 0.560498220640569, 0.560498220640569, 0.560498220640569, 0.560498220640569, 0.560498220640569, 0.551601423487544, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.542704626334519, 0.533807829181495, 0.529359430604982, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.524911032028469, 0.516014234875445, 0.507117437722419, 0.507117437722419, 0.507117437722419, 0.507117437722419, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.489323843416369, 0.480427046263345, 0.471530249110320, 0.462633451957295, 0.453736654804270, 0.453736654804270, 0.453736654804270, 0.453736654804270, 0.444839857651245, 0.435943060498221, 0.435943060498221, 0.435943060498221, 0.427046263345195, 0.418149466192171, 0.418149466192171, 0.418149466192171, 0.400355871886121, 0.400355871886121, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.378113879003558, 0.373665480427046, 0.364768683274021, 0.364768683274021, 0.355871886120996, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.338078291814946, 0.329181494661921, 0.329181494661921, 0.329181494661921, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.293594306049822, 0.293594306049822, 0.293594306049822, 0.293594306049822, 0.275800711743772, 0.275800711743772, 0.275800711743772, 0.266903914590747, 0.258007117437722, 0.258007117437722, 0.258007117437722, 0.249110320284697, 0.240213523131672, 0.240213523131672, 0.240213523131672, 0.240213523131672, 0.240213523131672, 0.240213523131672, 0.231316725978647, 0.222419928825622, 0.222419928825622, 0.222419928825622, 0.222419928825622, 0.213523131672598, 0.213523131672598, 0.204626334519572, 0.204626334519572, 0.204626334519572, 0.204626334519572, 0.204626334519572, 0.186832740213522, 0.186832740213522, 0.186832740213522, 0.186832740213522, 0.186832740213522, 0.177935943060498, 0;
    maracuja::Spectrum<T> GSpectrum;
    GSpectrum.set(400, 950, G);

    VectorX B(551);
    B << 2.57117437722420, 2.67793594306050, 2.74021352313167, 2.77876631079478, 2.81731909845789, 2.86832740213523, 2.91814946619217, 2.97597864768683, 3.03380782918149, 3.08185053380783, 3.14946619217082, 3.18505338078292, 3.24436536180308, 3.29181494661922, 3.34163701067616, 3.37633451957295, 3.42526690391459, 3.44750889679715, 3.50533807829182, 3.53202846975089, 3.59074733096085, 3.62989323843416, 3.67437722419929, 3.70699881376038, 3.76868327402135, 3.80338078291815, 3.87010676156584, 3.90569395017794, 3.97508896797153, 4.01245551601424, 4.07473309608541, 4.12811387900356, 4.18446026097272, 4.24673784104389, 4.30604982206406, 4.35349940688019, 4.43060498220641, 4.46975088967972, 4.50578291814947, 4.54181494661922, 4.57651245551601, 4.63523131672598, 4.67081850533808, 4.71530249110320, 4.75088967971530, 4.77758007117438, 4.80427046263345, 4.83985765124555, 4.83096085409253, 4.83985765124555, 4.83985765124555, 4.83985765124555, 4.81316725978648, 4.79537366548043, 4.76868327402135, 4.71886120996441, 4.69395017793594, 4.63523131672598, 4.58007117437722, 4.52846975088968, 4.47508896797153, 4.41281138790036, 4.36832740213523, 4.30308422301305, 4.27935943060498, 4.19928825622776, 4.16014234875445, 4.08362989323843, 4.02728351126928, 3.93950177935943, 3.89679715302491, 3.83451957295374, 3.77817319098458, 3.71293001186240, 3.68742586002373, 3.66192170818505, 3.60320284697509, 3.55516014234875, 3.49644128113879, 3.44839857651246, 3.38967971530249, 3.34074733096085, 3.29181494661922, 3.24733096085409, 3.19395017793594, 3.15391459074733, 3.10320284697509, 3.05693950177936, 3.00711743772242, 2.96085409252669, 2.90925266903915, 2.86921708185053, 2.79715302491103, 2.75800711743772, 2.69572953736655, 2.67793594306050, 2.57117437722420, 2.55871886120996, 2.48220640569395, 2.45195729537367, 2.37010676156584, 2.33985765124555, 2.26868327402135, 2.21233689205219, 2.13523131672598, 2.07930859176411, 1.98102016607355, 1.91814946619217, 1.82680901542111, 1.81071004914421, 1.79461108286731, 1.70818505338078, 1.64590747330961, 1.55693950177936, 1.50991357397051, 1.41331977630910, 1.36756481952211, 1.28113879003559, 1.22521606507372, 1.14641586171835, 1.08540925266904, 1.01423487544484, 0.964412811387899, 0.907473309608540, 0.871886120996441, 0.804270462633451, 0.747330960854092, 0.707295373665480, 0.662811387900356, 0.622775800711743, 0.578291814946619, 0.516014234875445, 0.510083036773428, 0.462633451957295, 0.435943060498221, 0.400355871886121, 0.367734282325030, 0.338078291814946, 0.311387900355872, 0.275800711743772, 0.260972716488730, 0.231316725978648, 0.204626334519572, 0.177935943060498, 0.173487544483985, 0.169039145907473, 0.133451957295374, 0.115658362989324, 0.0889679715302485, 0.0711743772241986, 0.0444839857651238, 0.0177935943060490, 0.0355871886120989, 0.0177935943060490, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00889679715302449, 0, 0.0177935943060490, 0.0177935943060490, 0.0266903914590744, 0.0355871886120989, 0.0622775800711741, 0.0622775800711741, 0.0889679715302485, 0.0889679715302485, 0.0978647686832739, 0.106761565836298, 0.120106761565836, 0.133451957295374, 0.133451957295374, 0.151245551601423, 0.160142348754448, 0.169039145907473, 0.169039145907473, 0.195729537366548, 0.195729537366548, 0.204626334519572, 0.204626334519572, 0.231316725978648, 0.222419928825622, 0.231316725978648, 0.240213523131672, 0.240213523131672, 0.249110320284697, 0.266903914590747, 0.258007117437722, 0.266903914590747, 0.275800711743772, 0.275800711743772, 0.275800711743772, 0.293594306049822, 0.293594306049822, 0.293594306049822, 0.284697508896797, 0.302491103202846, 0.293594306049822, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.311387900355872, 0.315836298932384, 0.320284697508896, 0.329181494661921, 0.338078291814946, 0.329181494661921, 0.338078291814946, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.364768683274021, 0.355871886120996, 0.355871886120996, 0.373665480427046, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.391459074733096, 0.391459074733096, 0.391459074733096, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.382562277580071, 0.355871886120996, 0.364768683274021, 0.346975088967971, 0.346975088967971, 0.346975088967971, 0.338078291814946, 0.333629893238434, 0.329181494661921, 0.329181494661921, 0.320284697508896, 0.311387900355872, 0.302491103202846, 0.302491103202846, 0.284697508896797, 0.275800711743772, 0.275800711743772, 0.266903914590747, 0.240213523131672, 0.240213523131672, 0.231316725978648, 0.231316725978648, 0.213523131672598, 0.204626334519572, 0.204626334519572, 0.195729537366548, 0.186832740213522, 0.186832740213522, 0.177935943060498, 0.169039145907473, 0.169039145907473, 0.169039145907473, 0.151245551601423, 0.160142348754448, 0.133451957295374, 0.133451957295374, 0.133451957295374, 0.133451957295374, 0.106761565836298, 0.106761565836298, 0.115658362989324, 0.0978647686832739, 0.0978647686832739, 0.0978647686832739, 0.0978647686832739, 0.0800711743772240, 0.0889679715302485, 0.0711743772241986, 0.0711743772241986, 0.0622775800711741, 0.0622775800711741, 0.0622775800711741, 0.0444839857651242, 0.0444839857651242, 0.0533807829181487, 0.0444839857651242, 0.0266903914590744, 0.0266903914590744, 0.0266903914590744, 0.0266903914590744, 0.0266903914590744, 0.00889679715302449, 0.0177935943060490, 0.0177935943060490, 0.0177935943060490, 0.0177935943060490, 0.00889679715302449, 0.00444839857651180, 0.00444839857651180, 0.00444839857651180, 0.00444839857651180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0237247924080659, 0.0711743772241986, 0.106761565836298, 0.160142348754448, 0.219454329774614, 0.270462633451957, 0.326215895610913, 0.377224199288255, 0.444839857651245, 0.500762582613116, 0.584646670055922, 0.631672597864768, 0.676156583629893, 0.738434163701068, 0.800711743772242, 0.820284697508896, 0.839857651245551, 0.913404507710557, 0.946619217081850, 1.05871886120996, 1.07651245551601, 1.13523131672598, 1.18327402135231, 1.23220640569395, 1.27224199288256, 1.30782918149466, 1.30782918149466, 1.34341637010676, 1.34341637010676, 1.37900355871886, 1.38790035587189, 1.41459074733096, 1.42348754448399, 1.41459074733096, 1.41459074733096, 1.44128113879004, 1.44128113879004, 1.43238434163701, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.45017793594306, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.44128113879004, 1.43683274021352, 1.43238434163701, 1.42348754448399, 1.42348754448399, 1.43238434163701, 1.43238434163701, 1.43238434163701, 1.41459074733096, 1.41459074733096, 1.41459074733096, 1.41459074733096, 1.41459074733096, 1.38790035587189, 1.38790035587189, 1.38790035587189, 1.37900355871886, 1.37900355871886, 1.37010676156584, 1.35231316725979, 1.37010676156584, 1.34341637010676, 1.34341637010676, 1.32562277580071, 1.32562277580071, 1.31672597864769, 1.30782918149466, 1.29893238434164, 1.29003558718861, 1.27224199288256, 1.27224199288256, 1.26334519572954, 1.26334519572954, 1.24555160142349, 1.23665480427046, 1.22775800711744, 1.21886120996441, 1.21441281138790, 1.20996441281139, 1.20106761565836, 1.19217081850534, 1.19217081850534, 1.18327402135231, 1.16548042704626, 1.15658362989324, 1.15658362989324, 1.12989323843416, 1.12989323843416, 1.12099644128114, 1.12099644128114, 1.11209964412811, 1.10320284697509, 1.08540925266904, 1.07651245551601, 1.05871886120996, 1.05871886120996, 1.04982206405694, 1.04092526690391, 1.03202846975089, 1.02313167259786, 1.01423487544484, 1.00533807829181, 1.00533807829181, 0.996441281138790, 0.978647686832740, 0.965302491103202, 0.951957295373665, 0.951957295373665, 0.934163701067615, 0.934163701067615, 0.916370106761566, 0.916370106761566, 0.907473309608541, 0.898576512455516, 0.889679715302491, 0.880782918149466, 0.880782918149466, 0.854092526690391, 0.854092526690391, 0.845195729537366, 0.836298932384342, 0.827402135231317, 0.818505338078292, 0.809608540925266, 0.800711743772242, 0.782918149466192, 0.782918149466192, 0.774021352313167, 0.765124555160142, 0.747330960854092, 0.738434163701068, 0.738434163701068, 0.729537366548042, 0.711743772241992, 0.702846975088968, 0.702846975088968, 0.693950177935943, 0.685053380782918, 0.676156583629893, 0.667259786476868, 0.649466192170818, 0.640569395017793, 0.631672597864768, 0.622775800711743, 0.622775800711743, 0.596085409252669, 0.587188612099644, 0.582740213523131, 0.578291814946619, 0.569395017793594, 0.560498220640569, 0.551601423487544, 0.533807829181495, 0.533807829181495, 0.524911032028469, 0.511565836298932, 0.498220640569395, 0.489323843416369, 0.462633451957295, 0.462633451957295, 0.453736654804270, 0.444839857651245, 0.427046263345195, 0.427046263345195, 0.418149466192171, 0;
    maracuja::Spectrum<T> BSpectrum;
    BSpectrum.set(400, 950, B);

    std::vector<Spectrum<T> > RGB(0);
    RGB.push_back(RSpectrum);
    RGB.push_back(GSpectrum);
    RGB.push_back(BSpectrum);

    // compute reconstruct the RGB image
    return convolute( RGB, whitebalance );
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::load( const std::string& filename )
{
    // load the document
    std::string directory = filename.substr( 0, filename.find_last_of('/')+1 );
    tinyxml2::XMLDocument doc;
    int loadStatus = doc.LoadFile( filename.c_str() );
    if( tinyxml2::XML_SUCCESS != loadStatus )
        throw std::runtime_error( "MSImage::load: " + std::string( doc.GetErrorStr1() ) );

    // get the root
    tinyxml2::XMLNode* root = doc.FirstChildElement( "MultispectralImage" );
    if( root == 0 )
        throw std::runtime_error( "MSImage::load: root node not found." );

    // get the channels
    tinyxml2::XMLNode* channels = root->FirstChildElement( "Channels" );
    if( channels == 0 )
        throw std::runtime_error( "MSImage::load: no channels." );

    // run over all the channels
    m_channels.clear();
    for( tinyxml2::XMLNode* chPtr=channels->FirstChildElement( "Channel" ); chPtr != 0; chPtr = chPtr->NextSiblingElement( "Channel" ) )
    {
        Channel<T,Ti> ch;
        int id;
        std::string name, imageFilename;
        double fs, fe, ss, se;
        std::vector<T> fd, sd;

        // get channel id & name
        str2scalar( getElementValue( chPtr, "Id" ), id);
        name = getElementValue( chPtr, "Name" );

        // get channel filter
        tinyxml2::XMLNode* filterNode = chPtr->FirstChildElement( "Filter" );
        str2scalar( getElementValue( filterNode, "Start" ), fs);
        str2scalar( getElementValue( filterNode, "End" ), fe );
        str2vector( getElementValue( filterNode, "Data" ), fd );
        Spectrum<T> filter( fs, fe, fd );

        // get channel sensor
        tinyxml2::XMLNode* sensorNode = chPtr->FirstChildElement( "Sensor" );
        str2scalar( getElementValue( sensorNode, "Start" ), ss);
        str2scalar( getElementValue( sensorNode, "End" ), se );
        str2vector( getElementValue( sensorNode, "Data" ), sd );
        Spectrum<T> sensor( ss, se, sd );

        // get the image
        imageFilename = getElementValue( chPtr, "Image" );
        imageFilename = directory + imageFilename;
        std::shared_ptr< Image > image( new Image() );
        image->load( imageFilename.c_str() );

        // add the image
        m_channels.push_back( Channel<T,Ti>( id, name, filter, sensor, image ) );
    }

    // read the timestamp
    m_timestamp = getElementValue( root, "Timestamp" );
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::save( const std::string& filename )
{
    // check all is well
    checkChannels();

    // init stuff
    tinyxml2::XMLDocument doc;
    std::string baseFilename = filename.substr( 0, filename.find_last_of('.') );

    // add root
    tinyxml2::XMLNode* root = doc.InsertEndChild( doc.NewElement( "MultispectralImage" ) );

    // run over the channels
    tinyxml2::XMLNode* channels = root->InsertEndChild( doc.NewElement( "Channels" ) );
    for( size_t i=0; i<m_channels.size(); i++ )
    {
        // init channel
        tinyxml2::XMLNode* channel = channels->InsertEndChild( doc.NewElement( "Channel" ) );

        // add channel id & name
        appendTextElement( doc, *channel, std::string("Id"), toString(m_channels[i].id() ) );
        appendTextElement( doc, *channel, std::string("Name"), m_channels[i].name() );

        // add the filter
        tinyxml2::XMLNode* filter = channel->InsertEndChild( doc.NewElement( "Filter" ) );
        appendTextElement( doc, *filter, std::string("Start"), toString( m_channels[i].filter().start() ) );
        appendTextElement( doc, *filter, std::string("End"), toString( m_channels[i].filter().end() ) );
        appendTextElement( doc, *filter, std::string("Data"), toString( m_channels[i].filter().data() ) );

        // add the sensor
        tinyxml2::XMLNode* sensor = channel->InsertEndChild( doc.NewElement( "Sensor" ) );
        appendTextElement( doc, *sensor, std::string("Start"), toString( m_channels[i].sensor().start() ) );
        appendTextElement( doc, *sensor, std::string("End"), toString( m_channels[i].sensor().end() ) );
        appendTextElement( doc, *sensor, std::string("Data"), toString( m_channels[i].sensor().data() ) );

        // the image
        std::string channelFilename = baseFilename + "-" + toString( m_channels[i].id()) + ".bmp";
        appendTextElement( doc, *channel, std::string("Image"), channelFilename.substr( channelFilename.find_last_of('/')+1, channelFilename.size() ) );
    }

    // add the timespamp
    appendTextElement( doc, *root, std::string("Timestamp"), m_timestamp );

    // wrap up
    doc.SaveFile( (filename.substr( 0, filename.find_last_of('.') ) + ".msx").c_str() );

    // save the images
//#       pragma omp parallel for
    for( size_t i=0; i<m_channels.size(); i++ )
        m_channels[i].image().save_bmp( (baseFilename + "-" + toString( m_channels[i].id()) + ".bmp").c_str() );
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::checkChannels()
{
    // check if theere are any channels
    if( m_channels.size() == 0 )
        throw std::runtime_error( "MSImage::checkChannels: NO channels." );

    // check all channels
    for( size_t i=0; i<m_channels.size(); i++ )
        m_channels[i].check();
}


template <typename T, typename Ti>
inline std::string MSImage<T,Ti>::getElementValue( tinyxml2::XMLNode* node, std::string name )
{
    tinyxml2::XMLNode* childTag = node->FirstChildElement( name.c_str() );
    if( childTag != 0 )
    {
        tinyxml2::XMLNode* childText = childTag->FirstChild();
        if( childText != 0 )
            return std::string( childText->Value() );
    }
    return std::string();
}


template <typename T, typename Ti>
inline void MSImage<T,Ti>::appendTextElement( tinyxml2::XMLDocument& doc,
                                              tinyxml2::XMLNode& node,
                                              std::string name,
                                              std::string val )
{
    tinyxml2::XMLNode* tmp = node.InsertEndChild( doc.NewElement( name.c_str() ) );
    tmp->InsertEndChild( doc.NewText( val.c_str() ));
}

} // end namespace maracuja
